#include "Include_Misc.ulp";
#include "Include_Language.ulp";

string 
cfg_textLanguage = "", 
cfg_userName = "", 
cfg_shortUserName = "",
cfg_pricingURL = "http://eagle.berniwa.com/price.php",
cfg_defaultTolerance = "1%",
cfg_defaultVoltage = "50V"
;

//variables for bom export presets
string 	cfg_bomPreNames[];
real 	cfg_bomPreOffX[];
real 	cfg_bomPreOffY[];
real 	cfg_bomPreWidth[];
int 	cfg_bomPreCount;

void saveConfig() {
	cfgset("ULP:ExportPro.language",cfg_textLanguage);
	cfgset("ULP:ExportPro.userName",cfg_userName);
	cfgset("ULP:ExportPro.shortUserName",cfg_shortUserName);
	cfgset("ULP:ExportPro.pricingURL",cfg_pricingURL);
	cfgset("ULP:ExportPro.defaultTolerance",cfg_defaultTolerance);
	cfgset("ULP:ExportPro.defaultVoltage",cfg_defaultVoltage);

	if(cfg_bomPreNames[1]!=""){
		string data="";
		int i=1;
		while(1){
			sprintf(data,"%s%s,%f,%f,%f", data, cfg_bomPreNames[i], cfg_bomPreOffX[i], cfg_bomPreOffY[i], cfg_bomPreWidth[i]);

			if(cfg_bomPreNames[++i]){
				data+=";";
			}
			else {
				break;
			}
		}
		cfgset("ULP:ExportPro.bomPresets",data);
	}
}

char editUserConfig(){
	char set=!(strlen(cfg_textLanguage));
	string lastLanguage = cfg_textLanguage;
	char update=0;
	string languages[];
	int languageCount = fileglob(languages,getUlpDir("../Languages/lang_*.txt"));
	int n = 0;

	if(!set){
		lanLoadText(cfg_textLanguage);
	}

	for(int i=0; i<languageCount; i++){
		languages[i] = filename(languages[i]);
		languages[i] = strsub(languages[i],5,(strrstr(languages[i],".txt")-5));

		if(strstr(cfg_textLanguage,languages[i])!=-1){
			n=i;
		}
	}

	cfg_textLanguage = "lang_"+languages[n]+".txt";

	real tol = strtod(cfg_defaultTolerance);
	real volt = strtod(cfg_defaultVoltage);

	dlgDialog(set?"Settings":lanGetText("settings.general")) {
		dlgVBoxLayout {
			dlgGroup(set?"Initial settings":lanGetText("settings.general")) {
				dlgGridLayout {
					dlgCell(0, 0) dlgLabel(set?"Language:":lanGetText("general.language")+":");
					dlgCell(0, 1) dlgComboBox(languages,n){
						cfg_textLanguage = "lang_"+languages[n]+".txt";
						update=1;
					};

					dlgCell(1, 0) dlgLabel(set?"Username:":lanGetText("grneral.userName")+":");
					dlgCell(1, 1) dlgStringEdit(cfg_userName);
					dlgCell(2, 0) dlgLabel(set?"Shortname:":lanGetText("general.shortName")+":");
					dlgCell(2, 1) dlgStringEdit(cfg_shortUserName);
					dlgCell(3, 0) dlgLabel(set?"Pricing URL:":lanGetText("general.pricingURL")+":");
					dlgCell(3, 1) dlgStringEdit(cfg_pricingURL);
					dlgCell(4, 0) dlgLabel(set?"Default resistor tolerance:":lanGetText("settings.default.tolerance")+":");
					dlgCell(4, 1) dlgHBoxLayout {dlgRealEdit(tol); dlgLabel("%");}
					dlgCell(5, 0) dlgLabel(set?"Default capacitor voltage:":lanGetText("settings.default.voltage")+":");
					dlgCell(5, 1) dlgHBoxLayout {dlgRealEdit(volt); dlgLabel("V");}
				}
			}

			dlgHBoxLayout{
			dlgPushButton(set?"OK":lanGetText("button.ok")){dlgAccept();};
				if(!set){
					dlgPushButton(lanGetText("button.cancel")){
						update=0;
						cfg_textLanguage = lastLanguage;
						dlgReject();
					};
				}
			}
		}
	};

	sprintf(cfg_defaultTolerance,"%g%%",tol);
	sprintf(cfg_defaultVoltage,"%gV",volt);

	saveConfig();
	return update;
}

void loadConfig(){
	
	cfg_textLanguage = cfgget("ULP:ExportPro.language");
	cfg_userName = cfgget("ULP:ExportPro.userName");
	cfg_shortUserName = cfgget("ULP:ExportPro.shortUserName");
	cfg_pricingURL = cfgget("ULP:ExportPro.pricingURL",cfg_pricingURL);
	cfg_defaultTolerance = cfgget("ULP:ExportPro.defaultTolerance",cfg_defaultTolerance);
	cfg_defaultVoltage = cfgget("ULP:ExportPro.defaultVoltage",cfg_defaultVoltage);
	string tmp = cfgget("ULP:ExportPro.bomPresets");
	if(tmp!=""){
		string tmpa[];
		string tmpb[];
		cfg_bomPreCount = strsplit(tmpa,tmp,';');

		cfg_bomPreNames[0]="";

		for(int n=0; n<cfg_bomPreCount; n++){
			strsplit(tmpb,tmpa[n],',');

			cfg_bomPreNames[n+1]=tmpb[0];
			cfg_bomPreOffX[n+1]=strtod(tmpb[1]);
			cfg_bomPreOffY[n+1]=strtod(tmpb[2]);
			cfg_bomPreWidth[n+1]=strtod(tmpb[3]);
		}
	}

	if(cfg_textLanguage=="") {
		editUserConfig();
	}
}
