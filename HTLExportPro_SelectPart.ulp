/************************************************************/
/* HTLExportPro.ulp                                         */
/* Allows proper BOM management directly in Eagle 			*/
/************************************************************/
/* (c) Copyright 2016, Bernhard Wörndl-Aichriedler          */
/* E-Mail: bwa@xdevelop.at  	                            */
/* Homepage: www.xdevelop.at                                */
/************************************************************/
/* Letzte Änderung am 15.02.2016                            */
/* Version 2.0                                              */
/************************************************************/

#include "Include_Misc.ulp"
#include "Include_FastExecute.ulp";
#include "Include_BomConfig.ulp";
#include "Include_String.ulp"
#include "Include_BomCategory.ulp"
#include "Include_BomCommon.ulp"
#include "Include_BomPricing.ulp"
#include "Include_Language.ulp";

int rerun = 1, save = 1;
string 	list[];

void updateAttributeList(){
	for(int i = 0; i < partcount; i++){
		sprintf(list[i], "%s\t%s\t%s\t%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s", 
			names[i], values[i], packages[i] , pages[i], 
			distributor[i], order_no[i], 
			manufacturer[i], part_no[i],
			price[i], available[i], per_pkg[i], min_qty[i], qty_mul[i], 
			populate[i], BOM_PART_CATEGORIES[category[i]], note[i]
		);	
	}
}

real calculatePrice(){
	real mprice = 0;

	for(int i = 0; i < partcount; i++){
		mprice += strtod(price[i]);
	}
	return mprice;
}

real calculatePriceWOUnpopulated(){
	real mprice = 0;

	for(int i = 0; i < partcount; i++){
		if(populate[i] != "DNP"){
			mprice += strtod(price[i]);
		}
	}
	return mprice;
}

int calculateAvailableParts(){
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++){
		int av = strtod(available[i]);
		if(av > bomCountPartsWithSameOrderNo(distributor[i], order_no[i])){mpartcount++;}
	}
	return mpartcount;	
}


int calculatePartsWithOrderNo(){
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++){
		if(distributor[i] != "" && order_no[i] != ""){
			mpartcount++;
		}
	}
	return mpartcount;	
}

int calculatePartsWithPrice(){
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++){
		if(price[i] != ""){mpartcount++;}
	}
	return mpartcount;	
}

void requestAllPrices(){
	bomPricingRequestAll();
}

void editDevice(int selected){
	int saveDevice = 1;
	int mode = 1;
	int populateMode = 0;
	int noteMode = 0;

	//Populate
	if(populate[selected] == ""){
		populateMode = 0;
	} 
	else if(populate[selected] == "DNP"){
		populateMode = 1;
	} 	
	else{
		populateMode = 2;
	}

	//Note modes
	noteMode = -1;
	int i = 0;
	for(i = 0; BOM_PREDEFINED_NOTES[i]; i++){
		if(note[selected] == BOM_PREDEFINED_NOTES[i]){
			noteMode = i;
		}
	}
	if(noteMode == -1){
		noteMode = i;
	}

	dlgDialog(lanGetText("headline.dlg.editDevice")){		
		dlgGroup(lanGetText("headline.DevInfo")){
			dlgHBoxLayout{
				dlgLabel(lanGetText("tab.part")+":");
				dlgLabel(names[selected]);	
				dlgLabel(lanGetText("tab.value")+":");
				dlgLabel(values[selected]);
				dlgLabel(lanGetText("tab.pac")+":");	
				dlgLabel(packages[selected]);
			}
		}

		dlgGroup(lanGetText("headline.populate")){
			dlgHBoxLayout{
				dlgLabel(lanGetText("tab.populate"));
				dlgRadioButton(lanGetText("general.yes"), 	populateMode);
				dlgRadioButton(lanGetText("general.no"), 	populateMode);
				dlgRadioButton(lanGetText("general.special")+":", 	populateMode);
				dlgStringEdit(populate[selected]);	
			}			
		}

		dlgGroup(lanGetText("headline.updatemode")){
			dlgHBoxLayout{
 				dlgRadioButton(lanGetText("tab.part")+" "+lanGetText("general.name"), mode);
  				dlgRadioButton(lanGetText("tab.value")+" && "+lanGetText("tab.pac"), mode);
  				dlgRadioButton(lanGetText("tab.value"), mode);
  				dlgRadioButton(lanGetText("tab.pac"), mode);
			}			
		}

		dlgGroup(lanGetText("tab.note")){
			dlgVBoxLayout{
				for(i = 0; BOM_PREDEFINED_NOTES[i]; i++){
					dlgRadioButton(BOM_PREDEFINED_NOTES[i], noteMode);
				}
				dlgHBoxLayout{
					dlgRadioButton(lanGetText("general.custom")+":", noteMode);
					dlgStringEdit(note[selected]);						
				}
			}			
		}

		dlgGroup(lanGetText("headline.newValues")){		
			dlgGridLayout{
				dlgCell(0, 0) dlgLabel(lanGetText("tab.distriputor"));
				dlgCell(0, 1) dlgStringEdit(distributor[selected]);
				dlgCell(0, 2) dlgLabel(lanGetText("tab.order.No"));
				dlgCell(0, 3) dlgStringEdit(order_no[selected]);	
				dlgCell(1, 0) dlgLabel(lanGetText("tab.manufacturer"));
				dlgCell(1, 1) dlgStringEdit(manufacturer[selected]);	
				dlgCell(1, 2) dlgLabel(lanGetText("tab.part.No"));
				dlgCell(1, 3) dlgStringEdit(part_no[selected]);	
				dlgCell(2, 0) dlgLabel(lanGetText("tab.price")+"*");
				dlgCell(2, 1) dlgStringEdit(price[selected]);	
				dlgCell(2, 2) dlgLabel(lanGetText("settings.newVal.prices")+"*");
				dlgCell(2, 3) dlgStringEdit(prices[selected]);
				dlgCell(3, 0) dlgLabel(lanGetText("settings.newVal.minQuantity")+"*");
				dlgCell(3, 1) dlgStringEdit(min_qty[selected]);	
				dlgCell(3, 2) dlgLabel(lanGetText("settings.newVal.QuantityMulti")+"*");
				dlgCell(3, 3) dlgStringEdit(qty_mul[selected]);
				dlgCell(4, 0) dlgLabel(lanGetText("settings.newVal.available")+"*");
				dlgCell(4, 1) dlgStringEdit(available[selected]);	
				dlgCell(4, 2) dlgLabel(lanGetText("settings.newVal.perPkg")+"*");
				dlgCell(4, 3) dlgStringEdit(per_pkg[selected]);
				dlgCell(5, 0) dlgLabel(lanGetText("settings.newVal.datasheet")+"*");
				dlgCell(5, 1) dlgStringEdit(datasheet[selected]);
				dlgCell(5, 2) dlgLabel(lanGetText("tab.category"));
				dlgCell(5, 3) dlgComboBox(BOM_PART_CATEGORIES, category[selected]);
				dlgCell(6, 0, 6, 2) dlgLabel(lanGetText("dlg.newVal.footnote"));	
				dlgCell(6, 3, 6, 3) dlgPushButton(lanGetText("button.request")) { 
					bomPricingRequest(selected); 
				} 	
			}
		}

		dlgHBoxLayout{	
			dlgStretch(1);
			dlgPushButton(lanGetText("button.save")){dlgAccept(); }
		}
	};

	if(saveDevice){

		if(populateMode == 0){
			populate[selected] = "";
		} 
		else if(populateMode == 1){
			populate[selected] = "DNP";
		} 

		if(BOM_PREDEFINED_NOTES[noteMode]){
			note[selected] = BOM_PREDEFINED_NOTES[noteMode];
		}

		bomUpdatePart(selected, mode);
	}	
}


int showListOfDevices(){

	if(board){
		exit("EDIT .sch; RUN HTLExportPro_SelectPart.ulp;");
	}

	int selected = 0;
	int sorted = 0;
	int quantity = 1;

	bomLoadData();
	lanLoadText();

	while(1){
		updateAttributeList();
	
		int dstatus = dlgDialog(lanGetText("headline.dlg.SPMain")){
			dlgHBoxLayout{
				dlgVBoxLayout dlgSpacing(600);
				dlgListView(lanGetText("tab.part")+"\t"+
					lanGetText("tab.value")+"\t"+
					lanGetText("tab.pac")+"\t"+
					lanGetText("tab.sheet")+"\t"+
					lanGetText("tab.distriputor")+"\t"+
					lanGetText("tab.order.No")+"\t"+
					lanGetText("tab.manufacturer")+"\t"+
					lanGetText("tab.part.No")+"\t"+
					lanGetText("tab.price")+"\t"+
					lanGetText("tab.available")+"\t"+
					lanGetText("tab.perPkg")+"\t"+
					lanGetText("tab.minQuantity")+"\t"+
					lanGetText("tab.QuantityMulti")+"\t"+
					lanGetText("tab.populate")+"\t"+
					lanGetText("tab.category")+"\t"+
					lanGetText("tab.note"), 
					list, selected, sorted)
				{
					editDevice(selected);
					//dlgRedisplay();
					dlgAccept();
				}
			}
			dlgHBoxLayout{
				dlgGroup(lanGetText("general.info")){
					dlgGridLayout{
						string tmp = "", tmp2 = "", tmp4 = "";
						sprintf(tmp, "%d %s %d", calculatePartsWithOrderNo(), lanGetText("general.of"), partcount);
						sprintf(tmp2, "%d %s %d", calculatePartsWithPrice(), lanGetText("general.of"), partcount);
						sprintf(tmp4, "%d %s %d", calculateAvailableParts(), lanGetText("general.of"), partcount);

						dlgCell(0, 1) dlgLabel(lanGetText("settings.orderInfo")+":");
						dlgCell(0, 2) dlgLabel(tmp);
						dlgCell(1, 1) dlgLabel(lanGetText("settings.priceInfo")+":");
						dlgCell(1, 2) dlgLabel(tmp2);
						dlgCell(2, 1) dlgLabel(lanGetText("settings.available")+":");
						dlgCell(2, 2) dlgLabel(tmp4);
					}
				}
				dlgGroup(lanGetText("headline.pricing")){
					dlgGridLayout{
						string tmp3 = "";
						sprintf(tmp3, "%f (%f) Euro", calculatePriceWOUnpopulated(), calculatePrice());

						dlgCell(0, 3) dlgLabel(lanGetText("settings.quanttity")+":");
						dlgCell(0, 4) dlgIntEdit(quantity);
						dlgCell(1, 3) dlgLabel(lanGetText("settings.requPrice")+":");
						dlgCell(1, 4) dlgPushButton(lanGetText("button.priceRequest")){bomPricingRequestAllWithMultiplier(quantity);dlgAccept();};
						dlgCell(2, 3) dlgLabel(lanGetText("settings.overPrice")+"*:");
						dlgCell(2, 4) dlgLabel(tmp3);
					}
				}				
				dlgStretch(1);
				dlgHBoxLayout{
					dlgStretch(1); dlgStretch(1);
					dlgPushButton(lanGetText("button.save")){dlgAccept(); return 1;}
					dlgPushButton(lanGetText("button.cancel")){dlgReject(); return 0;}
				}
			}
		};

		if(dstatus == -1){
			break;
		}
	}

	return 1;
}

if(showListOfDevices()){
	executeAndExit(bomUpdateChanges());
}