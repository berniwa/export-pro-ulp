/************************************************************/
/* HTLExportPro.ulp                                         */
/* Allows proper BOM management directly in Eagle 			*/
/************************************************************/
/* (c) Copyright 2016, Bernhard Wörndl-Aichriedler          */
/* E-Mail: bwa@xdevelop.at  	                            */
/* Homepage: www.xdevelop.at                                */
/************************************************************/
/* Letzte Änderung am 15.02.2016                            */
/* Version 2.0                                              */
/************************************************************/

#include "Include_Misc.ulp"
#include "Include_FastExecute.ulp";
#include "Include_BomConfig.ulp";
#include "Include_String.ulp"
#include "Include_BomCategory.ulp"
#include "Include_BomCommon.ulp"
#include "Include_BomPricing.ulp"

int rerun = 1, save = 1;
string 	list[];

void updateAttributeList()
{
	for(int i = 0; i < partcount; i++)
	{
		sprintf(list[i], "%s\t%s\t%s\t%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s", 
			names[i], values[i], packages[i] , pages[i], 
			distributor[i], order_no[i], 
			manufacturer[i], part_no[i],
			price[i], available[i], per_pkg[i], min_qty[i], qty_mul[i], 
			populate[i], BOM_PART_CATEGORIES[category[i]], note[i]
		);	
	}
}

real calculatePrice()
{
	real mprice = 0;

	for(int i = 0; i < partcount; i++)
	{
		mprice += strtod(price[i]);
	}
	return mprice;
}

real calculatePriceWOUnpopulated()
{
	real mprice = 0;

	for(int i = 0; i < partcount; i++)
	{
		if(populate[i] != "DNP")
		{
			mprice += strtod(price[i]);
		}
	}
	return mprice;
}

int calculateAvailableParts()
{
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++)
	{
		int av = strtod(available[i]);
		if(av > bomCountPartsWithSameOrderNo(distributor[i], order_no[i])){mpartcount++;}
	}
	return mpartcount;	
}


int calculatePartsWithOrderNo()
{
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++)
	{
		if(distributor[i] != "" && order_no[i] != ""){mpartcount++;}
	}
	return mpartcount;	
}

int calculatePartsWithPrice()
{
	int mpartcount = 0;

	for(int i = 0; i < partcount; i++)
	{
		if(price[i] != ""){mpartcount++;}
	}
	return mpartcount;	
}

void requestAllPrices()
{
	bomPricingRequestAll();
}

void editDevice(int selected)
{
	int saveDevice = 1;
	int mode = 1;
	int populateMode = 0;
	int noteMode = 0;

	//Populate
	if(populate[selected] == "")			{populateMode = 0;} 
	else if(populate[selected] == "DNP")	{populateMode = 1;} 	
	else 									{populateMode = 2;}

	//Note modes
	noteMode = -1;
	int i = 0;
	for(i = 0; BOM_PREDEFINED_NOTES[i]; i++)
	{
		if(note[selected] == BOM_PREDEFINED_NOTES[i]) 
											{noteMode = i;}
	}
	if(noteMode == -1)						{noteMode = i;}

	dlgDialog("Set Attributes for Device")
	{		
		dlgGroup("Device Information")
		{
			dlgHBoxLayout
			{
				dlgLabel("Part");
				dlgLabel(names[selected]);	
				dlgLabel("Value");
				dlgLabel(values[selected]);
				dlgLabel("Package");	
				dlgLabel(packages[selected]);
			}
		}

		dlgGroup("Populate (only for this device)")
		{
			dlgHBoxLayout
			{
				dlgLabel("Populate");
				dlgRadioButton("Yes", 		populateMode);
				dlgRadioButton("No", 		populateMode);
				dlgRadioButton("Special", 	populateMode);
				dlgStringEdit(populate[selected]);	
			}			
		}

		dlgGroup("Update Mode")
		{
			dlgHBoxLayout
			{
 				dlgRadioButton("Part Name", mode);
  				dlgRadioButton("Device Value && Package", mode);
  				dlgRadioButton("Device Value", mode);
  				dlgRadioButton("Package", mode);
			}			
		}


		dlgGroup("Note")
		{
			dlgVBoxLayout
			{
				for(i = 0; BOM_PREDEFINED_NOTES[i]; i++)
				{
					dlgRadioButton(BOM_PREDEFINED_NOTES[i], 			noteMode);
				}
				dlgHBoxLayout
				{
					dlgRadioButton("Custom:", 	noteMode);
					dlgStringEdit(note[selected]);						
				}
			}			
		}

		dlgGroup("New Values")
		{		
			dlgGridLayout
			{
				dlgCell(0, 0) dlgLabel("DISTRIBUTOR");
				dlgCell(0, 1) dlgStringEdit(distributor[selected]);
				dlgCell(0, 2) dlgLabel("ORDER_NO");
				dlgCell(0, 3) dlgStringEdit(order_no[selected]);	
				dlgCell(1, 0) dlgLabel("MANUFACTURER");
				dlgCell(1, 1) dlgStringEdit(manufacturer[selected]);	
				dlgCell(1, 2) dlgLabel("PART_NO");
				dlgCell(1, 3) dlgStringEdit(part_no[selected]);	
				dlgCell(2, 0) dlgLabel("PRICE*");
				dlgCell(2, 1) dlgStringEdit(price[selected]);	
				dlgCell(2, 2) dlgLabel("PRICES*");
				dlgCell(2, 3) dlgStringEdit(prices[selected]);
				dlgCell(3, 0) dlgLabel("MINIMUM_QUANTITIY*");
				dlgCell(3, 1) dlgStringEdit(min_qty[selected]);	
				dlgCell(3, 2) dlgLabel("QUANTITIY_MULTIPLIER*");
				dlgCell(3, 3) dlgStringEdit(qty_mul[selected]);
				dlgCell(4, 0) dlgLabel("AVAILABLE_QUANTITY*");
				dlgCell(4, 1) dlgStringEdit(available[selected]);	
				dlgCell(4, 2) dlgLabel("PARTS_PER_PACKAGE*");
				dlgCell(4, 3) dlgStringEdit(per_pkg[selected]);
				dlgCell(5, 0) dlgLabel("DATASHEET*");
				dlgCell(5, 1) dlgStringEdit(datasheet[selected]);
				dlgCell(5, 2) dlgLabel("CATEGORY");
				dlgCell(5, 3) dlgComboBox(BOM_PART_CATEGORIES, category[selected]);
				dlgCell(6, 0, 6, 2) dlgLabel("* might be overwriten when requesting the price over the internet");	
				dlgCell(6, 3, 6, 3) dlgPushButton("Request") { bomPricingRequest(selected); } 	
			}
		}

		dlgHBoxLayout
		{	
			dlgStretch(1);
			dlgPushButton("Save"){dlgAccept(); }
		}
	};

	if(saveDevice)
	{

		if(populateMode == 0){populate[selected] = "";} 
		else if(populateMode == 1){populate[selected] = "DNP";} 

		if(BOM_PREDEFINED_NOTES[noteMode])
		{
			note[selected] = BOM_PREDEFINED_NOTES[noteMode];
		}

		bomUpdatePart(selected, mode);
	}	
}


int showListOfDevices()
{
	int selected = 0;
	int sorted = 0;
	int quantity = 1;

	bomLoadData();

	while(1)
	{
		updateAttributeList();
	
		int dstatus = dlgDialog("Set Attributes for Device with value")
		{
			dlgHBoxLayout
			{
				dlgVBoxLayout dlgSpacing(600);
				dlgListView("Part\tValue\tPackage\tSheet\tDistributor\tOrder No.\tManufacturer\tPart No.\tPrice\tAvail. Qty.\tPer Pkg.\tMin. Qty.\tQty. Mul.\tPopulate\tCategory\tNote", list, selected, sorted)
				{
					editDevice(selected);
					//dlgRedisplay();
					dlgAccept();
				}
			}
			dlgHBoxLayout
			{
				dlgGroup("Information")
				{
					dlgGridLayout
					{
						string tmp = "", tmp2 = "", tmp4 = "";
						sprintf(tmp, "%d of %d", calculatePartsWithOrderNo(), partcount);
						sprintf(tmp2, "%d of %d", calculatePartsWithPrice(), partcount);
						sprintf(tmp4, "%d of %d", calculateAvailableParts(), partcount);

						dlgCell(0, 1) dlgLabel("Ordering information present:");
						dlgCell(0, 2) dlgLabel(tmp);
						dlgCell(1, 1) dlgLabel("Pricing information present:");
						dlgCell(1, 2) dlgLabel(tmp2);
						dlgCell(2, 1) dlgLabel("Availability:");
						dlgCell(2, 2) dlgLabel(tmp4);
					}
				}
				dlgGroup("Pricing")
				{
					dlgGridLayout
					{
						string tmp3 = "";
						sprintf(tmp3, "%f (%f) Euro", calculatePriceWOUnpopulated(), calculatePrice());

						dlgCell(0, 3) dlgLabel("Quantity:");
						dlgCell(0, 4) dlgIntEdit(quantity);
						dlgCell(1, 3) dlgLabel("Request prices: ");
						dlgCell(1, 4) dlgPushButton("Update all prices"){bomPricingRequestAllWithMultiplier(quantity);dlgAccept();};
						dlgCell(2, 3) dlgLabel("Overall price*:");
						dlgCell(2, 4) dlgLabel(tmp3);
					}
				}				
				dlgStretch(1);
				dlgVBoxLayout
				{
					dlgStretch(1); dlgStretch(1);
					dlgPushButton("Abort"){dlgReject(); return 0;}
					dlgPushButton("Save"){dlgAccept(); return 1;}
				}
			}
		};

		if(dstatus == -1){break;}
	}

	return 1;
}

if(showListOfDevices())
{
	executeAndExit(bomUpdateChanges());
}